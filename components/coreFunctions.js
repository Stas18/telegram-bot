const { google } = require('googleapis');

module.exports = {
  init: function (deps) {
    this.bot = deps.bot;
    this.logger = deps.logger;
    this.fileManager = deps.fileManager;
    this.subscriptionsManager = deps.subscriptionsManager;
    this.votingManager = deps.votingManager;
    this.historyManager = deps.historyManager;
    this.meetingManager = deps.meetingManager;
    this.filmsManager = deps.filmsManager;
    this.githubService = deps.githubService;
    this.formatter = deps.formatter;
    this.menuCreator = deps.menuCreator;
    this.ADMIN_IDS = deps.ADMIN_IDS;
    this.DEFAULT_MEETING = deps.DEFAULT_MEETING;
    this.ANIMATION_URLS = deps.ANIMATION_URLS;
    this.SPREADSHEET_ID = deps.SPREADSHEET_ID;
    this.SHEET_NAME = deps.SHEET_NAME;
    this.CREDENTIALS_PATH = deps.CREDENTIALS_PATH;
    this.GITHUB_TOKEN = deps.GITHUB_TOKEN;
  },

  uploadHistoryToGoogleSheets: async function (historyEntry) {
    try {
      const auth = new google.auth.GoogleAuth({
        keyFile: this.CREDENTIALS_PATH,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
      });

      const sheets = google.sheets({ version: 'v4', auth });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
      const values = [
        [
          historyEntry.film || historyEntry['–§–∏–ª—å–º'],
          historyEntry.director || historyEntry['–†–µ–∂–∏—Å—Å–µ—Ä'],
          historyEntry.genre || historyEntry['–ñ–∞–Ω—Ä'],
          historyEntry.country || historyEntry['–°—Ç—Ä–∞–Ω–∞'],
          historyEntry.year || historyEntry['–ì–æ–¥'],
          historyEntry.average?.toFixed(1) || historyEntry['–û—Ü–µ–Ω–∫–∞'] || 'N/A',
          historyEntry.discussionNumber || historyEntry['–ù–æ–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è'],
          historyEntry.date || historyEntry['–î–∞—Ç–∞'],
          historyEntry.poster || historyEntry['–ü–æ—Å—Ç–µ—Ä URL'],
          historyEntry.description || historyEntry['–û–ø–∏—Å–∞–Ω–∏–µ'] || ' ',
          historyEntry.participants || historyEntry['–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'] || 0
        ]
      ];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
      try {
        const response = await sheets.spreadsheets.values.get({
          spreadsheetId: this.SPREADSHEET_ID,
          range: `${this.SHEET_NAME}!A1:K1`,
        });

        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (!response.data.values) {
          await sheets.spreadsheets.values.update({
            spreadsheetId: this.SPREADSHEET_ID,
            range: `${this.SHEET_NAME}!A1:K1`,
            valueInputOption: 'RAW',
            resource: {
              values: [[
                '–§–∏–ª—å–º', '–†–µ–∂–∏—Å—Å–µ—Ä', '–ñ–∞–Ω—Ä', '–°—Ç—Ä–∞–Ω–∞', '–ì–æ–¥', '–û—Ü–µ–Ω–∫–∞',
                '–ù–æ–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ü–æ—Å—Ç–µ—Ä URL', '–û–ø–∏—Å–∞–Ω–∏–µ', '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
              ]],
            },
          });
        }
      } catch (error) {
        // –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        await sheets.spreadsheets.values.update({
          spreadsheetId: this.SPREADSHEET_ID,
          range: `${this.SHEET_NAME}!A1:K1`,
          valueInputOption: 'RAW',
          resource: {
            values: [[
              '–§–∏–ª—å–º', '–†–µ–∂–∏—Å—Å–µ—Ä', '–ñ–∞–Ω—Ä', '–°—Ç—Ä–∞–Ω–∞', '–ì–æ–¥', '–û—Ü–µ–Ω–∫–∞',
              '–ù–æ–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è', '–î–∞—Ç–∞', '–ü–æ—Å—Ç–µ—Ä URL', '–û–ø–∏—Å–∞–Ω–∏–µ', '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
            ]],
          },
        });
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
      await sheets.spreadsheets.values.append({
        spreadsheetId: this.SPREADSHEET_ID,
        range: `${this.SHEET_NAME}!A2:K`,
        valueInputOption: 'RAW',
        resource: {
          values: values,
        },
      });

      this.logger.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ Google Sheets!');
      return true;
    } catch (error) {
      this.logger.error(error, 'uploadHistoryToGoogleSheets');
      throw error;
    }
  },

  saveToGitHubAndSheets: async function (historyEntry) {
    try {
      // 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ films.json (–¥–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤)
      // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–µ –∫–ª—é—á–∏
      const normalizedEntry = {
        '–§–∏–ª—å–º': historyEntry.film || historyEntry['–§–∏–ª—å–º'],
        '–†–µ–∂–∏—Å—Å–µ—Ä': historyEntry.director || historyEntry['–†–µ–∂–∏—Å—Å–µ—Ä'],
        '–ñ–∞–Ω—Ä': historyEntry.genre || historyEntry['–ñ–∞–Ω—Ä'],
        '–°—Ç—Ä–∞–Ω–∞': historyEntry.country || historyEntry['–°—Ç—Ä–∞–Ω–∞'],
        '–ì–æ–¥': historyEntry.year || historyEntry['–ì–æ–¥'],
        '–û—Ü–µ–Ω–∫–∞': historyEntry.average?.toFixed(1) || historyEntry['–û—Ü–µ–Ω–∫–∞'] || 'N/A',
        '–ù–æ–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è': historyEntry.discussionNumber || historyEntry['–ù–æ–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è'],
        '–î–∞—Ç–∞': historyEntry.date || historyEntry['–î–∞—Ç–∞'],
        '–ü–æ—Å—Ç–µ—Ä URL': historyEntry.poster || historyEntry['–ü–æ—Å—Ç–µ—Ä URL'],
        '–û–ø–∏—Å–∞–Ω–∏–µ': historyEntry.description || historyEntry['–û–ø–∏—Å–∞–Ω–∏–µ'] || ' ',
        '–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤': historyEntry.participants || historyEntry['–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'] || 0
      };

      const films = this.filmsManager.add(normalizedEntry);

      // 2. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ GitHub - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –í–ï–°–¨ –º–∞—Å—Å–∏–≤ films
      await this.githubService.getCurrentFileSha();
      await this.githubService.updateFilmsOnGitHub(films);

      // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø–∏—Å—å
      await this.uploadHistoryToGoogleSheets(normalizedEntry);

      return true;
    } catch (error) {
      this.logger.error(error, 'saving to GitHub and Sheets');
      throw error;
    }
  },

  sendMeetingInfo: async function (chatId) {
    try {
      const meeting = this.meetingManager.getCurrent();
      const voting = this.votingManager.load();
      const isAdmin = this.ADMIN_IDS.includes(chatId.toString());

      const message = this.formatter.formatMovieInfo(meeting, voting);
      await this.bot.sendPhoto(chatId, voting.poster || meeting.poster, {
        caption: message,
        parse_mode: 'HTML',
        ...this.menuCreator.createMainMenu(isAdmin)
      });
    } catch (error) {
      this.logger.error(error, `sending meeting info to ${chatId}`);
      try {
        await this.bot.sendAnimation(chatId, this.ANIMATION_URLS.ERROR, {
          caption: '–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        });
      } catch (e) {
        this.logger.error(e, 'sending error animation');
      }
    }
  },

  showSubscriptionMenu: async function (chatId) {
    try {
      const subscriptions = this.subscriptionsManager.load();
      const isSubscribed = subscriptions.has(chatId.toString());

      await this.bot.sendMessage(
        chatId,
        isSubscribed
          ? '–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∫–ª—É–±–∞! üéâ'
          : '–¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö üòî',
        this.menuCreator.createSubscriptionMenu(isSubscribed)
      );
    } catch (error) {
      console.error('Error in showSubscriptionMenu:', error);
      if (this.logger) {
        this.logger.error(error, 'showing subscription menu');
      }
      await this.bot.sendMessage(
        chatId,
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.'
      );
    }
  },

  showHistory: async function (chatId) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ñ–∏–ª—å–º–∞ –∏–∑ –æ–±—â–µ–≥–æ –º–∞—Å—Å–∏–≤–∞
      const recentFilms = this.filmsManager.getRecent(2);
      const isAdmin = this.ADMIN_IDS.includes(chatId.toString());

      if (!recentFilms || recentFilms.length === 0) {
        return await this.bot.sendMessage(
          chatId,
          '–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.',
          this.menuCreator.createMainMenu(isAdmin)
        );
      }

      for (const item of recentFilms) {
        const film = item['–§–∏–ª—å–º'] || item.film;
        const director = item['–†–µ–∂–∏—Å—Å–µ—Ä'] || item.director;
        const genre = item['–ñ–∞–Ω—Ä'] || item.genre;
        const country = item['–°—Ç—Ä–∞–Ω–∞'] || item.country;
        const year = item['–ì–æ–¥'] || item.year;
        const description = item['–û–ø–∏—Å–∞–Ω–∏–µ'] || item.description;
        const average = item['–û—Ü–µ–Ω–∫–∞'] || item.average;
        const discussionNumber = item['–ù–æ–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è'] || item.discussionNumber;
        const date = item['–î–∞—Ç–∞'] || item.date;
        const poster = item['–ü–æ—Å—Ç–µ—Ä URL'] || item.poster;
        const participants = item['–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤'] || item.participants;

        const message = `üìú <b>–ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫:</b>\n\n` +
          `üé• <b>${this.formatter.escapeHtml(film)}</b>\n` +
          `üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${description || ' '}\n` +
          `üé≠ <b>–ñ–∞–Ω—Ä:</b> ${genre || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üåé <b>–°—Ç—Ä–∞–Ω–∞:</b> ${country || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n` +
          `üìÖ <b>–ì–æ–¥:</b> ${year || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üé¨ <b>–†–µ–∂–∏—Å—Å–µ—Ä:</b> ${director || '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n` +
          `üî¢ <b>–ù–æ–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è:</b> ${discussionNumber}\n` +
          `üóì <b>–î–∞—Ç–∞:</b> ${date}\n` +
          `‚≠ê <b>–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞:</b> ${average || 'N/A'}/10\n` +
          `üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> ${participants || 0}`;

        try {
          if (poster) {
            await this.bot.sendPhoto(chatId, poster, {
              caption: message,
              parse_mode: 'HTML'
            });
          } else {
            await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
          }
        } catch (error) {
          this.logger.error(error, `sending history item ${film}`);
          await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
        }
      }

      await this.bot.sendMessage(
        chatId,
        `–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ñ–∏–ª—å–º–∞.`,
        this.menuCreator.createMainMenu(isAdmin)
      );
    } catch (error) {
      this.logger.error(error, 'showing history');
      await this.bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫.');
    }
  }
};
