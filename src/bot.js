require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const path = require('path');
const nodeSchedule = require('node-schedule');

// Config imports
const DEFAULT_MEETING = require('../config/default-meeting.json');
const {
  ENV_CHECK,
  ANIMATION_URLS,
  SPREADSHEET_ID,
  SHEET_NAME
} = require('../config/constants');

// Utility imports
const logger = require('../utils/logger');
const fileManager = require('../utils/fileManager');

// Manager imports
const subscriptionsManager = require('../managers/subscriptionsManager');
const votingManager = require('../managers/votingManager');
const historyManager = require('../managers/historyManager');
const meetingManager = require('../managers/meetingManager');
const filmsManager = require('../managers/filmsManager');

// Service imports
const githubService = require('../services/githubService');

// Component imports
const formatter = require('../components/formatter');
const menuCreator = require('../components/menuCreator');
const coreFunctions = require('../components/coreFunctions');
const commandHandlers = require('../handlers/commandHandlers');
const callbackHandlers = require('../handlers/callbackHandlers');

// Validate environment
const validateEnvironment = () => {
  const missingVars = Object.values(ENV_CHECK).filter(key => !process.env[key]);
  if (missingVars.length > 0) {
    logger.error(`Missing required environment variables: ${missingVars.join(', ')}`);
    process.exit(1);
  }
};

validateEnvironment();

// Initialize bot
const bot = new TelegramBot(process.env.BOT_TOKEN, {
  polling: true,
  filepath: false,
  baseApiUrl: 'https://api.telegram.org'
});

let ADMIN_IDS = process.env.ADMIN_IDS.split(',');

// Inject dependencies
const dependencies = {
  bot,
  logger,
  fileManager,
  subscriptionsManager,
  votingManager,
  historyManager,
  meetingManager,
  filmsManager,
  githubService,
  formatter,
  menuCreator,
  coreFunctions,
  ADMIN_IDS,
  DEFAULT_MEETING,
  ANIMATION_URLS,
  SPREADSHEET_ID,
  SHEET_NAME,
  CREDENTIALS_PATH: path.join(__dirname, '../config/credentials.json'),
  GITHUB_TOKEN: process.env.GITHUB_TOKEN
};

// Initialize githubService
githubService.init({
  logger: logger,
  GITHUB_TOKEN: dependencies.GITHUB_TOKEN
});

// Initialize handlers with dependencies
coreFunctions.init(dependencies);
commandHandlers.init(dependencies);
callbackHandlers.init(dependencies);

// Set up event listeners
bot.onText(/\/start/, (msg) => commandHandlers.start(msg));
bot.onText(/\/notify (.+)/, (msg, match) => commandHandlers.notify(msg, match));
bot.onText(/\/subscribers/, (msg) => commandHandlers.subscribers(msg));
bot.onText(/\/restart/, (msg) => commandHandlers.restart(msg));
bot.onText(/\/checkadmin/, (msg) => commandHandlers.checkadmin(msg));
bot.onText(/\/test_sheets/, (msg) => commandHandlers.test_sheets(msg));

bot.on('message', async (msg) => {
  if (msg.text && !msg.text.startsWith('/')) {
    const chatId = msg.chat.id;
    const isAdmin = ADMIN_IDS.includes(chatId.toString());

    const handlers = {
      '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ': async () => {
        await bot.sendMessage(
          chatId,
          'üé¨ <b>–ö–∏–Ω–æ-–∫–ª—É–± "–û–¥–∏—Å—Å–µ—è"</b>\n\n' +
          '–ú—ã ‚Äî —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –ª—é–±–∏—Ç–µ–ª–µ–π –∫–∏–Ω–æ, –∫–æ—Ç–æ—Ä—ã–µ:\n' +
          '‚Ä¢ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –æ–±—Å—É–∂–¥–∞—é—Ç —Ñ–∏–ª—å–º—ã\n' +
          '‚Ä¢ –°–µ—Ä—å–µ–∑–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –∫–∏–Ω–æ–∫–∞—Ä—Ç–∏–Ω—ã\n' +
          '‚Ä¢ –î–µ–ª—è—Ç—Å—è –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –≤ –¥—Ä—É–∂–µ—Å–∫–æ–π –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ\n\n' +
          'üìå <b>–§–æ—Ä–º–∞—Ç –≤—Å—Ç—Ä–µ—á:</b>\n' +
          '1. –°–Ω–∞—á–∞–ª–∞ —Å–º–æ—Ç—Ä–∏–º —Ñ–∏–ª—å–º –¥–æ–º–∞\n' +
          '2. –í—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –≤ –∫–æ—Ñ–µ–π–Ω–µ\n' +
          '3. –û–±—Å—É–∂–¥–∞–µ–º –∏ —Å—Ç–∞–≤–∏–º –æ—Ü–µ–Ω–∫–∏\n\n' +
          'üì¨ <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n' +
          '‚Ä¢ –ê–¥–º–∏–Ω –±–æ—Ç–∞: @GeekLS\n' +
          '‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: –ù–∞—Å—Ç–µ–Ω—å–∫–∞\n' +
          '‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (978) 736-32-12\n' +
          '‚Ä¢ –°–∞–π—Ç: https://ulysses-club.github.io/odissea/',
          {
            parse_mode: 'HTML',
            ...menuCreator.createMainMenu(isAdmin)
          }
        );
        await coreFunctions.sendMeetingInfo(chatId);
      },
      'üìÖ –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞': () => coreFunctions.showSubscriptionMenu(chatId),
      'üåê –ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏': async () => {
        await bot.sendMessage(
          chatId,
          `üì¢ <b>–ù–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n\n` +
          `–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, –∞–Ω–æ–Ω—Å—ã –∏ –¥–∞–∂–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É! üéÆ\n\n` +
          `üîπ <b>–ò–≥—Ä–æ–≤–æ–π –±–æ—Ç –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b> ‚Äî –Ω—É–∂–Ω—ã —Ç–µ—Å—Ç–µ—Ä—ã! üõ†\n` +
          `üîπ –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω—É –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.`,
          {
            parse_mode: 'HTML',
            ...menuCreator.createSocialsMenu()
          }
        );
      },
      'üìú –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫': () => coreFunctions.showHistory(chatId),
      'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å': async () => {
        if (isAdmin) {
          await bot.sendMessage(chatId, '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', menuCreator.createAdminPanel());
        } else {
          await bot.sendMessage(chatId, '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º', menuCreator.createMainMenu(isAdmin));
        }
      }
    };

    if (handlers[msg.text]) {
      await handlers[msg.text]();
    } else {
      await bot.sendMessage(
        chatId,
        '–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üòâ',
        menuCreator.createMainMenu(isAdmin)
      );
    }
  }
});

bot.on('callback_query', async (query) => {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await callbackHandlers.handleCallback(query);
  } catch (error) {
    logger.error(`Error handling callback: ${error.message}`);
    try {
      await bot.answerCallbackQuery(query.id, {
        text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        show_alert: false
      });
    } catch (e) {
      logger.error(`Failed to answer callback: ${e.message}`);
    }
  }
});
// Set up weekly schedule
const weeklySchedule = nodeSchedule.scheduleJob('0 14 * * 5', async () => {
  logger.log('–ó–∞–ø—É—Å–∫ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏');
  const subscriptions = subscriptionsManager.load();

  for (const chatId of subscriptions) {
    try {
      await bot.sendChatAction(chatId, 'upload_photo');
      await coreFunctions.sendMeetingInfo(chatId);
    } catch (error) {
      logger.error(error, `sending weekly notification to ${chatId}`);
      subscriptions.delete(chatId);
    }
  }

  subscriptionsManager.save(subscriptions);
});

// Start the bot
logger.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
console.log('ADMIN_IDS:', ADMIN_IDS);