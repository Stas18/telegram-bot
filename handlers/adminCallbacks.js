const { google } = require('googleapis');

module.exports = {
  init: function(deps) {
    Object.assign(this, deps);
  },

  handle: async function(query) {
    const chatId = query.message.chat.id;
    const voting = this.votingManager.load();
    const meeting = this.meetingManager.getCurrent();

    try {
      await this.bot.answerCallbackQuery(query.id, { text: '–û–±—Ä–∞–±–æ—Ç–∫–∞...', show_alert: false });

      const adminHandlers = {
        admin_rate_movie: async () => this.handleRateMovie(query, voting, meeting),
        admin_finish_rating: async () => this.handleFinishRating(query, voting, meeting),
        admin_clear_votes: async () => this.handleClearVotes(query, voting),
        admin_send_results: async () => this.handleSendResults(query, voting),
        admin_save_to_history: async () => this.handleSaveToHistory(query, voting),
        admin_add_next_movie: async () => this.handleAddNextMovie(query),
        admin_broadcast_news: async () => this.handleBroadcastNews(query)
      };

      if (query.data.startsWith('admin_rate_') && query.data !== 'admin_rate_movie') {
        await this.handleRatingInput(query, voting);
      } else if (adminHandlers[query.data]) {
        await adminHandlers[query.data]();
      }
    } catch (error) {
      this.logger.error(error, `admin callback ${query.data} from ${chatId}`);
      await this.bot.answerCallbackQuery(query.id, {
        text: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞',
        show_alert: false
      });
    }
  },

  handleRateMovie: async function(query, voting, meeting) {
    const chatId = query.message.chat.id;
    
    if (!voting.film) {
      Object.assign(voting, {
        film: meeting.film,
        director: meeting.director,
        genre: meeting.genre,
        year: meeting.year,
        poster: meeting.poster,
        discussionNumber: meeting.discussionNumber,
        date: meeting.date,
        description: meeting.description,
        country: meeting.country
      });
      this.votingManager.save(voting);
    }

    let message = '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∏–ª—å–º–∞:';
    if (voting.average) {
      message += `\n\n–¢–µ–∫—É—â–∏–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${voting.average.toFixed(1)}/10`;
      message += `\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: ${Object.keys(voting.ratings).length}`;
    }

    await this.bot.editMessageText(message, {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: this.menuCreator.createRatingKeyboard().reply_markup
    });
  },

  handleFinishRating: async function(query, voting, meeting) {
    const chatId = query.message.chat.id;
    
    if (Object.keys(voting.ratings).length === 0) {
      await this.bot.answerCallbackQuery(query.id, { text: '–í—ã –Ω–µ –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –æ—Ü–µ–Ω–∫–∏!' });
      return;
    }

    await this.bot.editMessageText(
      `‚úÖ –í–≤–æ–¥ –æ—Ü–µ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n${this.formatter.formatMovieInfo(meeting, voting)}`, 
      {
        chat_id: chatId,
        message_id: query.message.message_id,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [{ text: '‚≠ê –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–æ–¥ –æ—Ü–µ–Ω–æ–∫', callback_data: 'admin_rate_movie' }],
            [{ text: 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'back_to_main' }]
          ]
        }
      }
    );
  },

  handleClearVotes: async function(query, voting) {
    const chatId = query.message.chat.id;
    
    voting.ratings = {};
    voting.average = null;
    this.votingManager.save(voting);

    await this.bot.answerCallbackQuery(query.id, { text: '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã!' });
    await this.bot.editMessageText('üßπ –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.', {
      chat_id: chatId,
      message_id: query.message.message_id,
      reply_markup: this.menuCreator.createAdminPanel().reply_markup
    });
  },

  handleSendResults: async function(query, voting) {
    const chatId = query.message.chat.id;
    
    if (!voting.ratings || Object.keys(voting.ratings).length === 0) {
      return await this.bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏' });
    }

    const currentRatings = Object.values(voting.ratings);
    const average = currentRatings.reduce((a, b) => a + b, 0) / currentRatings.length;
    const subscriptions = this.subscriptionsManager.load();
    let sentCount = 0;

    for (const subChatId of subscriptions) {
      try {
        await this.bot.sendMessage(
          subChatId,
          `‚≠ê <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:</b>\n\n` +
          `–§–∏–ª—å–º: ${voting.film}\n` +
          `–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${average.toFixed(1)}/10\n` +
          `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${currentRatings.length}`,
          { parse_mode: 'HTML' }
        );
        sentCount++;
      } catch (error) {
        this.logger.error(error, `sending results to ${subChatId}`);
      }
    }

    await this.bot.answerCallbackQuery(query.id, { text: `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${sentCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º` });
    await this.bot.editMessageText(
      `‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã ${sentCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º`,
      {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: this.menuCreator.createAdminPanel().reply_markup
      }
    );
  },

  handleSaveToHistory: async function(query, voting) {
    const chatId = query.message.chat.id;
    
    if (!voting.average || !voting.film) {
      await this.bot.answerCallbackQuery(query.id, { text: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è' });
      return;
    }

    const historyEntry = {
      film: voting.film,
      director: voting.director,
      genre: voting.genre,
      country: voting.country,
      year: voting.year,
      description: voting.description || '',
      average: voting.average,
      participants: Object.keys(voting.ratings).length,
      date: voting.date || new Date().toLocaleDateString('ru-RU'),
      poster: voting.poster,
      discussionNumber: voting.discussionNumber
    };

    await this.bot.answerCallbackQuery(query.id, { text: '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ GitHub –∏ Google Sheets...' });

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ–±–∞ –º–µ—Å—Ç–∞
      await this.coreFunctions.saveToGitHubAndSheets(historyEntry);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      this.votingManager.save({
        ratings: {},
        average: null,
        film: null,
        director: null,
        genre: null,
        country: null,
        year: null,
        poster: null,
        discussionNumber: null,
        date: null,
        description: null
      });

      this.meetingManager.save(this.DEFAULT_MEETING);

      await this.bot.editMessageText('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∏—Å—Ç–æ—Ä–∏—é, GitHub –∏ Google Sheets!', {
        chat_id: chatId,
        message_id: query.message.message_id,
        reply_markup: this.menuCreator.createAdminPanel().reply_markup
      });
    } catch (error) {
      this.logger.error(error, 'saving to GitHub and Google Sheets');
      await this.bot.sendMessage(
        chatId,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ GitHub/Google Sheets. –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.'
      );
    }
  },

  handleAddNextMovie: async function(query) {
    const chatId = query.message.chat.id;
    
    await this.bot.answerCallbackQuery(query.id);
    await this.bot.editMessageText('–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∏–ª—å–º–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n' +
      '<b>–î–∞—Ç–∞|–í—Ä–µ–º—è|–ú–µ—Å—Ç–æ|–ù–∞–∑–≤–∞–Ω–∏–µ|–†–µ–∂–∏—Å—Å–µ—Ä|–ñ–∞–Ω—Ä|–°—Ç—Ä–∞–Ω–∞|–ì–æ–¥|–ü–æ—Å—Ç–µ—Ä URL|–ù–æ–º–µ—Ä –æ–±—Å—É–∂–¥–µ–Ω–∏—è|–û–ø–∏—Å–∞–Ω–∏–µ</b>\n\n', {
      chat_id: chatId,
      message_id: query.message.message_id,
      parse_mode: 'HTML'
    });

    const messageId = query.message.message_id;
    const responseListener = async (msg) => {
      if (msg.from.id.toString() === chatId.toString()) {
        this.bot.removeListener('message', responseListener);

        try {
          await this.bot.deleteMessage(chatId, messageId);
        } catch (error) {
          this.logger.error(error, 'deleting message');
        }

        const parts = msg.text.split('|').map(part => part.trim());
        if (parts.length === 11) {
          const nextMeeting = {
            date: parts[0],
            time: parts[1],
            place: parts[2],
            film: parts[3],
            director: parts[4],
            genre: parts[5],
            country: parts[6],
            year: parts[7],
            poster: parts[8],
            discussionNumber: parts[9],
            description: parts[10],
            requirements: this.meetingManager.getCurrent().requirements
          };
          this.meetingManager.save(nextMeeting);

          this.votingManager.save({
            ratings: {},
            average: null,
            film: parts[3],
            director: parts[4],
            genre: parts[5],
            country: parts[6],
            year: parts[7],
            poster: parts[8],
            discussionNumber: parts[9],
            date: parts[0],
            description: parts[10]
          });

          await this.bot.sendMessage(chatId, '‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–∏–ª—å–º–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!', this.menuCreator.createMainMenu(true));
          await this.coreFunctions.sendMeetingInfo(chatId);
        } else {
          await this.bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', this.menuCreator.createMainMenu(true));
        }
      }
    };

    this.bot.on('message', responseListener);
  },

  handleRatingInput: async function(query, voting) {
    const chatId = query.message.chat.id;
    const rating = parseInt(query.data.split('_')[2]);
    const participantId = `user_${Object.keys(voting.ratings).length + 1}`;

    voting.ratings[participantId] = rating;
    voting.average = this.votingManager.calculateAverage(voting.ratings);
    this.votingManager.save(voting);

    await this.bot.answerCallbackQuery(query.id, { text: `–û—Ü–µ–Ω–∫–∞ ${rating} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!` });
    await this.showRatingMenu(chatId, query.message.message_id, voting);
  },

  showRatingMenu: async function(chatId, messageId, voting) {
    try {
      const message = `‚úÖ –û—Ü–µ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n` +
        `–¢–µ–∫—É—â–∏–π —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${voting.average.toFixed(1)}/10\n` +
        `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫: ${Object.keys(voting.ratings).length}\n\n` +
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –æ—Ü–µ–Ω–∫—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥:';

      await this.bot.editMessageText(message, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: this.menuCreator.createRatingKeyboard().reply_markup
      });
    } catch (error) {
      this.logger.error(error, 'showing rating menu');
    }
  },

  handleBroadcastNews: async function(query) {
    const chatId = query.message.chat.id;
    
    await this.bot.answerCallbackQuery(query.id, { text: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏' });
    await this.bot.editMessageText('‚úâÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:</b>\n\n–§–æ—Ä–º–∞—Ç: –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ HTML-—Ä–∞–∑–º–µ—Ç–∫–∞', {
      chat_id: chatId,
      message_id: query.message.message_id,
      parse_mode: 'HTML'
    });
    
    // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const responseListener = async (msg) => {
      if (msg.from.id.toString() === chatId.toString()) {
        this.bot.removeListener('message', responseListener);

        try {
          await this.bot.deleteMessage(chatId, query.message.message_id);
        } catch (error) {
          this.logger.error(error, '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
        }

        const subscriptions = this.subscriptionsManager.load();
        let sentCount = 0;

        for (const subChatId of subscriptions) {
          try {
            await this.bot.sendMessage(
              subChatId,
              `üì¢ <b>–ù–æ–≤–æ—Å—Ç—å –æ—Ç –∫–∏–Ω–æ-–∫–ª—É–±–∞ "–û–¥–∏—Å—Å–µ—è":</b>\n\n${msg.text}`,
              { parse_mode: 'HTML' }
            );
            sentCount++;
          } catch (error) {
            this.logger.error(error, `–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è ${subChatId}`);
          }
        }

        await this.bot.sendMessage(
          chatId,
          `‚úÖ –ù–æ–≤–æ—Å—Ç—å —Ä–∞–∑–æ—Å–ª–∞–Ω–∞ ${sentCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º`,
          this.menuCreator.createAdminPanel()
        );
      }
    };

    this.bot.on('message', responseListener);
  }
};